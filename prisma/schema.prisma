generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String       @unique(map: "username_1")
  email          String       @unique(map: "email_1")
  password       String
  profilePic     String?      @default("")
  followerCount  Int          @default(0)
  followingCount Int          @default(0)
  bio            String?      @default("")
  tag            String       @default("student")
  isAdmin        Boolean      @default(false)
  createdAt      DateTime?    @default(now()) @db.Date
  updatedAt      DateTime?    @updatedAt
  posts          Post[]       // Add opposite relation field
  comments       Comment[]
  postLikes      PostLike[]   // Add opposite relation field for post likes
  commentLikes   CommentLike[] // Add opposite relation field for comment likes
  followers      Follow[]     @relation("Follower")
  following      Follow[]     @relation("Following")
}

model Category {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  posts  Post[]   // Add opposite relation field
}

model Post {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)
  title         String
  content       String
  attachments   String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  editedAt      DateTime?
  likes         PostLike[]  // Add opposite relation field
  likeCount     Int         @default(0)
  commentCount  Int         @default(0)
  comments      Comment[]   // Add opposite relation field for comments on this post
  isDeleted     Boolean     @default(false)
}

model Comment {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @db.ObjectId
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String      @db.ObjectId
  content     String
  attachments String[]
  createdAt   DateTime    @default(now()) @db.Date
  updatedAt   DateTime    @updatedAt
  editedAt    DateTime?
  parent      Comment?    @relation("NestedComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // relation for parent comment
  parentId    String?     @db.ObjectId
  children    Comment[]   @relation("NestedComments") // relation for child comments
  likes       CommentLike[] // Add relation field for comment likes
  likeCount   Int         @default(0)
  isDeleted   Boolean     @default(false)
}

model PostLike {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String    @db.ObjectId
  createdAt   DateTime  @default(now()) @db.Date
  updatedAt   DateTime  @updatedAt
}

model CommentLike {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String    @db.ObjectId
  createdAt   DateTime  @default(now()) @db.Date
  updatedAt   DateTime  @updatedAt
}

model Follow {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  follower        User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId      String   @db.ObjectId
  following       User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId     String   @db.ObjectId
  createdAt       DateTime @default(now()) @db.Date
  updatedAt       DateTime @updatedAt
}